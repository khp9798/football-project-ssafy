<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.ssafy.mvc.dao.MatchDao">

	<!-- 경기 등록 -->
	<insert id="insertMatch">
		INSERT INTO matches (name, stadium_id, manager_id, start_time,
		end_time)
		VALUES (#{name},#{stadiumId},#{managerId}, #{startTime}, #{endTime})
	</insert>

	<!-- 경기 수정 -->
	<update id="updateMatch">
		UPDATE matches
		SET stadium_id = #{stadiumId},
		start_time = #{startTime},
		end_time = #{endTime},
		status = #{status},
		manager_id = #{managerId}
		WHERE id = #{id}
	</update>

	<!-- 경기 삭제 -->
	<delete id="deleteMatch">
		DELETE FROM matches
		WHERE id = #{id}
	</delete>

	<!-- 경기 목록 조회 -->
	<select id="searchByCondition">
		select m.id, m.name, s.id, m.start_time, m.end_time,
		m.status, s.name as
		stadiumName, s.image
		from matches m, stadium s
		where
		m.stadium_id = s.id and s.address like concat('%',#{region},'%');

	</select>


	<select id="selectOne">
		SELECT
		m.id,
		m.name,
		s.id,
		m.start_time,
		m.end_time,
		m.status,
		m.stadium_id,
		m.manager_id,
		s.name AS stadiumName,
		s.image,
		s.address,
		u.name AS managerName
		FROM
		matches m
		JOIN
		stadium s
		ON
		m.stadium_id = s.id
		LEFT JOIN
		users u
		ON
		m.manager_id IS NOT NULL AND m.manager_id = u.id
		WHERE
		m.id = #{id};

	</select>

	<select id="selectAll">
		select m.id, m.name, s.id, m.start_time, m.end_time,
		m.status, s.name as
		stadiumName, s.image
		from matches m, stadium s
		where
		m.stadium_id = s.id;
	</select>


	<select id="selectcanList">
		select m.id, m.name, s.id, m.start_time, m.end_time,
		m.status, s.name as
		stadiumName, s.image
		from matches m, stadium s
		where
		m.stadium_id = s.id
		and m.status in ("마감 임박","신청 가능");
	</select>

	<select id="selectStadiumMatch">
		SELECT *
		FROM matches
		WHERE stadium_id = #{id}
	</select>



	<select id="matchAvgTier" resultType="string">
		SELECT
		CASE
		WHEN avg_tier
		&gt;= 0 AND avg_tier &lt; 0.5 THEN 'unranked'
		WHEN avg_tier &gt;= 0.5
		AND avg_tier &lt; 1.5 THEN 'bronze'
		WHEN avg_tier &gt;= 1.5 AND
		avg_tier &lt; 2.5 THEN 'silver'
		WHEN avg_tier &gt;= 2.5 AND avg_tier
		&lt; 3.5 THEN 'gold'
		WHEN avg_tier &gt;= 3.5 AND avg_tier &lt; 4.5 THEN
		'platinum'
		WHEN avg_tier &gt;= 4.5 THEN 'diamond'
		END as tier
		FROM (
		SELECT AVG(
		CASE users.tier
		WHEN 'unranked' THEN 0
		WHEN 'bronze' THEN 1
		WHEN 'silver' THEN 2
		WHEN 'gold' THEN 3
		WHEN 'platinum' THEN 4
		WHEN
		'diamond' THEN 5
		END
		) AS avg_tier
		FROM reservations
		JOIN users ON
		reservations.user_id = users.userid
		WHERE reservations.match_id =
		#{matchId}
		) AS subquery
	</select>

	<select id="selectStadiumDayMatch">
		SELECT *
		FROM matches
		WHERE stadium_id = #{id}
		AND
		DATE(start_time) BETWEEN DATE(#{date1}) AND DATE(#{date2})
		ORDER BY start_time
	</select>


	<select id="RecommandMatchList">
		select distinct m.id, m.name, s.id, m.start_time,
		m.end_time, s.address,
		m.status, s.name as
		stadiumName, s.image from
		matches m, users u,
		stadium s
		where s.id = m.stadium_id and m.status in
		('신청 가능', '마감 임박') and s.address
		like
		concat('%',#{province},'%',#{district},'%')
		order by m.status desc;
	</select>
	
<select id="getMatchManagerList">
    SELECT 
        m.*,               -- matches 테이블의 모든 컬럼
        s.name AS stadium_name, -- stadium의 name
        s.address AS address -- stadium의 address
    FROM matches m
    JOIN stadium s
    ON m.stadium_id = s.id
    WHERE m.manager_id = #{id}
</select>



</mapper>
